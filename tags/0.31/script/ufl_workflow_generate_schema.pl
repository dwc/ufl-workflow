#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;

use FindBin;
use lib "$FindBin::Bin/../lib";
use UFL::Workflow::Schema;

=head1 NAME

ufl_workflow_generate_schema.pl - Generate the schema for UFL::Workflow

=head1 SYNOPSIS

    ./script/ufl_workflow_generate_schema.pl | db2 -vtd%

=head1 DESCRIPTION

Generate the SQL statements for L<UFL::Workflow::Schema>.

=head1 AUTHOR

Daniel Westermann-Clark E<lt>dwc@ufl.eduE<gt>

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

##
## Main script
##

main(@ARGV);
sub main {
    my $type      = 'DB2';
    my $separator = '%';
    my $user      = 'dbzwap02';
    my $help      = 0;
    die usage() unless GetOptions(
        'type=s'        => \$type,
        'separator|s=s' => \$separator,
        'user|u=s'      => \$user,
        'help|h'        => \$help,
    );
    print usage() and exit() if $help;

    my $schema = UFL::Workflow::Schema->connect;

    my %options = (add_drop_table => 1, separator => $separator);
    my @statements = $schema->deployment_statements($type, undef, undef, \%options);

    if ($type eq 'DB2') {
        push @statements, $schema->grant_statements($user, $separator);
        push @statements, $schema->trigger_statements($separator);
    }

    print "--\n";
    print "-- Generated by $0 on " . scalar(localtime) . "\n";
    print "--\n";
    print "\n";
    print join "\n\n", @statements;
    print "\n";
}


##
## Subroutines
##

sub usage {
    return <<"END_OF_USAGE";
Usage: $0 [OPTION]...

Available options:
  -T, --type           The database type (e.g. DB2)
  -s, --separator      The SQL statement separator
  -u, --user           The database user to grant access to
  -h, --help           Print this help screen and exit
END_OF_USAGE
}
